var K = require('../krasota'),
    KrasotaJSIdentity = K.KrasotaJSIdentity;

ometa KrasotaJS <: KrasotaJSIdentity {
    needForSemicolonStmtWithExprAndStmt :k = t:s1 t:be t:s2 needForSemicolonStmtContent:c -> [k + #Stmt, s1, be, s2, c],

    needForSemicolonIfStmtIf = needForSemicolonStmtWithExprAndStmt(#if):i
            [#stmtEnd t:s1 (:c ?(c != ';'))?]
            t:s2
            t:s3
        -> {
            c && s2[1].unshift([#spaces, c]);
            i.concat([
                [#stmtEnd, s1, ';'],
                s2,
                s3
            ])
        }
        | stmtWithExprAndStmt(#if):i t:e t:s1 t:s2 -> i.concat([e, s1, s2]),

    ifStmt = needForSemicolonIfStmtIf:i t:c -> i.concat([c]) | ^ifStmt,
    needForSemicolonIfStmt = [#ifStmt needForSemicolonIfStmtIf:i needForSemicolonStmtContent:c] -> i.concat([c]),
    needForSemicolonIfStmt = [#ifStmt needForSemicolonStmtWithExprAndStmt(#if)],

    needForSemicolonStmtContent = [#exprStmt t]
        | [#varStmt [t+]]
        | [#returnStmt t+]
        | [#breakStmt t*]
        | [#continueStmt t*]
        | [#throwStmt t+]
        | [#whileStmt needForSemicolonStmtWithExprAndStmt(#while)]
        | [#withStmt needForSemicolonStmtWithExprAndStmt(#with)]
        | needForSemicolonIfStmt,
    needForSemicolonStmt = t:s1
        needForSemicolonStmtContent:e
        [#stmtEnd t:s2 (:c ?(c != ';'))?]
        t:s3 -> {
            c && s3[1].unshift([#spaces, c]);
            [#stmt, s1, e, [#stmtEnd, s2, ';'], s3]
        },
    stmt = needForSemicolonStmt | ^stmt
}
