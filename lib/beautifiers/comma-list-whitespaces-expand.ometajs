var K = require('../krasota'),
    KrasotaJSIdentity = K.KrasotaJSIdentity;

ometa KrasotaJS <: KrasotaJSIdentity {

    containNewLineAndReplaceIfNot :r = :t ->
        t.indexOf('\n') === -1 ? r : t,

    commaListItemFirstCommentFirstSC = ['spaces' containNewLineAndReplaceIfNot(' '):c] -> [#spaces, c] |
        t,

    commaListItemLastCommentLastSC = ['spaces' containNewLineAndReplaceIfNot(''):c] -> [#spaces, c] |
        t,

    commaListItemFirstComment =
        ['spacesAndComments' [commaListItemFirstCommentFirstSC?:sp t*:b]] -> {
            if(!sp || sp[0] === 'comment') b.unshift(['spaces', ' ']);
            return [#spacesAndComments, sp ? sp.concat(b) : b]

        },

    commaListItemLastComment = ['spacesAndComments' [t*:a]] -> {
            var lastItem = a.pop();
            if(lastItem) {
                computedLast = KrasotaJS.match(lastItem, 'commaListItemLastCommentLastSC');
                a.push(computedLast);
            }
            return [#spacesAndComments, a]
    },

    commaListFirstItem =
        [#objItem t:sc1 t:n t:sc2 t:sc3 t:v commaListItemLastComment:sc4] ->
            [#objItem, sc1, n, sc2, sc3, v, sc4] |
        [(#arrItem|#funcArg):n t:s1 t:e commaListItemLastComment:s2] ->
            [n, s1, e, s2],
    commaListLastItem =
        [#objItem commaListItemFirstComment:sc1 t:n t:sc2 t:sc3 t:v t:sc4] ->
            [#objItem, sc1, n, sc2, sc3, v, sc4] |
        [(#arrItem|#funcArg):n commaListItemFirstComment:s1 t:e t:s2] ->
            [n, s1, e, s2],
    commaListItem = t,
    commaListCommonItem =
        [#objItem commaListItemFirstComment:sc1 t:n t:sc2 t:sc3 t:v commaListItemLastComment:sc4] ->
            [#objItem, sc1, n, sc2, sc3, v, sc4] |
        [(#arrItem|#funcArg):n commaListItemFirstComment:s1 t:e commaListItemLastComment:s2] ->
            [n, s1 || s1, e, s2],

    commaList =
        commaListItem:first end -> [#commaList, first] |
        commaListFirstItem:first commaListItem+:tail -> {
            var last = KrasotaJS.match(tail.pop(), 'commaListLastItem');
            tail = tail.map(function(item){ return KrasotaJS.match(item, 'commaListCommonItem') });
            tail.push(last);
            return [#commaList, first].concat(tail);
        } |
        ^commaList

  }
